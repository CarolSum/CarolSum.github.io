<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Week1-Diary</title>
      <link href="/2019/03/05/Week1-Diary/"/>
      <content type="html"><![CDATA[<p><img src="/2019/03/05/Week1-Diary/IMG_8641.JPG" alt="大门"></p><p>第一周，总得留点什么吧。</p><a id="more"></a><p>一个人来到深圳这座陌生的城市，在华丽而又庞大的立交路口，第一次感受到原来不止开车的时候觉得深圳立交难走，就连行人立交也容易令人迷失方向。</p><p>月租3k多的8平小房间，这在我爸妈眼中应该很不可思议吧。家里三四线小城市一间店面可能都比这个便宜。没办法，这就是深圳，或者说，这就是南山。在考虑上下班距离以及租房整体的方便性，我还是咬咬牙，把房子租下来，甚至于租房之前，很担心自己觉得不错的房源已经没有了。</p><p><img src="/2019/03/05/Week1-Diary/IMG_8694.JPG" alt="大门"></p><p>入职的第一天，「兴奋」略带点「紧张」。公司环境很棒，很舒服，入职培训的小姐姐也很好。办完入职手续之后hr带去跟组员见面，中午跟组员一起吃饭。见到了二面的leader（看起来依旧那么严格，真不知道当时是怎么过的），见到了宇翔、镇佳、铭涛等matrix老哥。有他们陪伴，对公司渐渐熟悉起来。正如宇翔大佬说的，「有一堆师兄们罩着，不怕」。</p><p><img src="/2019/03/05/Week1-Diary/IMG_8671.JPG" alt="办公环境"></p><p>搭完环境后开始看代码，我开始慌了。很多复杂的东西看不懂，周围的人看起来个个都很牛，作为萌新菜到不敢吱声。学校跟公司还是有很大差距的，整个开发流程我现在也还没完全理清，各个部门的对接更是一窍不通。心底难免会失望，失望自己 为何和他们差距那么大。内心希望能够开始写代码，事实告诉我就算让我写也写不出来，至少目前如此。很多东西还是要慢慢融入，慢慢学习吧。心里如此「安慰」自己，给自己「摸鱼」找到了借口。</p><p>不得不说，公司的伙食真好呀。一日三餐，一周五天，没有完全相同的菜式，有着靠窗无敌景色，简直身心舒畅胃口大开呀🤤talk is cheap，上点图吧！</p><p><img src="/2019/03/05/Week1-Diary/IMG_8709.JPG" alt="lunch"><br><img src="/2019/03/05/Week1-Diary/IMG_8712.JPG" alt="美味下午茶"></p><p>突然觉得，晚上渐渐有点舍不得睡觉了。还记得去年去老大家中住的时候他跟我说「舍不得睡觉」是为什么了。老大回家后在麦当劳上班，每天五点多起床6点到店里开始上班一直到下午2点下班。还记得当初在宿舍老大每天都睡到自然醒呢😄那个时候，我开始觉得 为生活打拼真的会改变一个人。「舍不得睡觉」大抵是由于，属于自己可支配的时间被生活步步压缩变得愈发珍贵而产生的一种感概吧，想「挽留」住时光，不愿在睡觉中她又悄悄流逝了呢。</p><p>在雨中独自回家，旋律突然耳边响起。这大概便是生活吧。我们于家中父母为我们挡住了生活大部分艰辛，只留下看得过去的一面在子女面前。有时候突然觉得，很多以前觉得不可调和的矛盾，似乎也没那么重要了。</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件系统分析与设计--01</title>
      <link href="/2019/03/02/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-01/"/>
      <content type="html"><![CDATA[<h4 id="1-软件工程的定义"><a href="#1-软件工程的定义" class="headerlink" title="1. 软件工程的定义"></a>1. 软件工程的定义</h4><p>我所理解的软件工程，即将工程化思想应用到软件开发实践中。具体来说，就是应用工程管理中的系统化、规范化、可扩展化思维到软件开发、迭代、维护的具体实践中。比如说，采用瀑布模型开发软件、采用具备可扩展、易复用的架构设计、采用自顶向下的开发实践等等。</p><a id="more"></a><h4 id="2-解释导致-software-crisis-本质原因、表现，述说克服软件危机的方法"><a href="#2-解释导致-software-crisis-本质原因、表现，述说克服软件危机的方法" class="headerlink" title="2. 解释导致 software crisis 本质原因、表现，述说克服软件危机的方法"></a>2. 解释导致 software crisis 本质原因、表现，述说克服软件危机的方法</h4><p>软件危机的本质原因是 计算设备的计算能力的提高 超过了 程序员有效利用这些能力的能力，从而导致软件复杂性大幅度提高。</p><p>其表现方式有：项目运行超预算、项目运行时间过长、软件效率很低、软件质量很差、软件不符合要求、项目难以管理，代码难以维护、软件从未交付等；</p><p>要克服软件危机，需要有系统化、与时俱进的软件工程方法来管理和维护软件的开发和迭代，通过各种先进方式来改进软件质量，如采用面向过程、对象编程等。</p><h4 id="3-软件生命周期"><a href="#3-软件生命周期" class="headerlink" title="3. 软件生命周期"></a>3. 软件生命周期</h4><ul><li>可行性分析和计划阶段<ul><li>确定软件开发的总体目标，给出功能，性能，可靠性，接口等方面的要求，进行可行性分析</li><li>估计可利用的资源(硬件，软件，人力等)，成本，效益，开发进度，进行投资收益分析，制定开发计划</li><li>提交可行性分析报告，开发计划等文档</li></ul></li><li>需求分析阶段<ul><li>分析用户提出的要求，给出需求详细定义，确定软件系统的各项功能，性能需求和设计约束，确定对文档的编制的要求</li><li>提交软件需求说明，软件规格说明，数据要求说明等文档和初步用户手册</li></ul></li><li>设计阶段<ul><li>概要设计：将各项需求转换为软件的体系结构。软件的每一组成部分都是意义明确的模块，每个模块和某些需求相对应</li><li>详细设计：对没一个模块要完成的工作进行具体的描述，提供源编程编写的直接依据</li><li>提交结构设计说明，详细设计说明和测试计划初稿等文稿</li></ul></li><li>实现阶段<ul><li>实现源码编码，编译，和排错调试，得到没有语法错误的程序清单。程序结构良好，清晰易读，且与设计想一致</li><li>编写进度日报，周报，和月报</li><li>提交用户手册，操作手册等面向用户的文档的编写工作</li><li>编写测试计划</li></ul></li><li>测试阶段<ul><li>全面测试目标软件系统，并检查审阅已编制的文档，提交测试分析报告。逐项评价所生产的程序、文档以及开发工作本身，提交项目开发总结报告</li><li>在整个开发过程中 (即前五个阶段中)，开发集体需要按月编写</li><li>开发进度月报。</li></ul></li><li>运行与维护阶段<ul><li>软件提交给用户后，在运行使用中得到持续维护，根据用户新</li><li>提出的需求进行必要而且可能的扩充、删改、更新和升级。</li><li>软件维护包括改正性维护 (发现错误)、适应性维护 (适应运行环境变化) 和完善性维护 (增强功能)。</li></ul></li></ul><h4 id="4-SWEBoK-的-15-个知识域（An-Overview-of-the-SWEBOK-Guide-请中文翻译其名称与简短说明）"><a href="#4-SWEBoK-的-15-个知识域（An-Overview-of-the-SWEBOK-Guide-请中文翻译其名称与简短说明）" class="headerlink" title="4. SWEBoK 的 15 个知识域（An Overview of the SWEBOK Guide 请中文翻译其名称与简短说明）"></a>4. SWEBoK 的 15 个知识域（An Overview of the SWEBOK Guide 请中文翻译其名称与简短说明）</h4><p>SWEBoK 的 15 个知识域包括 11 个表征软件工程实践的知识领域和 4 个表征软件工程教育要求的知识领域。具体如下：</p><ul><li>软件要求：软件要求关注软件需求的启发，协商，分析，规范和验证。软件需求表达了对软件产品的需求和限制，这些需求和约束有助于解决一些现实问题。</li><li>软件设计：软件设计描述软件体系结构 - 即软件如何分解和组织成组件以及这些组件之间的接口。它还必须描述能够构建它们的详细程度的组件。</li><li>软件构建：软件构建是指通过结合详细设计，编码，单元测试，集成测试，调试和验证来详细创建工作软件。</li><li>软件测试：软件测试是一项旨在评估产品质量并通过识别缺陷来改进产品质量的活动。</li><li>软件维护：软件维护包括增强现有功能，调整软件以在新的和修改的操作环境中运行，以及纠正缺陷。</li><li>软件配置管理：软件配置管理（SCM）是在不同时间点识别系统配置的规则，用于系统地控制配置的改变，以及在整个软件生命周期中维持配置的完整性和可追溯性。</li><li>软件工程管理：软件工程管理涵盖了启动和范围定义、软件项目计划、软件项目制定、产品验收、审查和分析项目绩效、项目结束等方面。</li><li>软件工程过程：软件工程知识领域关注软件生命周期过程的定义，实施，评估，测量，管理和改进。</li><li>软件工程模型和方法：软件工程模型和方法KA解决了涵盖多个生命周期阶段的方法，包括建模、模型类型、分析和软件开发方法。</li><li>软件质量：软件质量KA包括软件质量的基础知识、软件质量管理流程和实际考虑。</li><li>软件工程专业实践：软件工程专业实践关注软件工程师必须具备的专业，负责和道德的软件工程知识，技能和态度。软件工程专业实践KA涵盖专业性、 道德准则;、小组动态和沟通技巧。</li><li>软件工程经济学：软件工程经济学KA关注的是在业务环境中做出决策，以使技术决策与组织的业务目标保持一致。涵盖的主题包括软件工程经济学的基本原理、非营利性决策、评估经济风险和不确定性、多属性决策等。</li><li>计算基础：计算基础KA涵盖了提供软件工程实践所需的计算背景的基础主题。包括问题解决技术、抽象、算法和复杂性、编程基础、并行和分布式计算的基础知识、计算机组成、操作系统和网络通信。</li><li>数学基础：数学基础KA涵盖了提供软件工程实践所必需的数学背景的基础主题。包括集合，关系和功能、基本命题和谓词逻辑、证明技术、图论、离散概率、语法和有限状态机、数论等。</li><li>工程基础：工程基础KA涵盖了提供软件工程实践所必需的工程背景的基础主题。涵盖的主题包括经验方法和实验技术、统计分析、测量和指标、工程设计、仿真与建模和根本原因分析。</li></ul><h4 id="5-简单解释-CMMI-的五个级别。例如：Level-1-Initial：无序，自发生产模式。"><a href="#5-简单解释-CMMI-的五个级别。例如：Level-1-Initial：无序，自发生产模式。" class="headerlink" title="5. 简单解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。"></a>5. 简单解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。</h4><ul><li>Level 1 - 完成级：在完成级水平上，企业对项目的目标与要做的努力很清晰，就是项目的目标得以实现。</li><li>Level 2 - 管理级：在管理级水平上，企业在项目实施上能够遵守既定的计划与流程，有资源准备，权责到人，对相关的项目实施人员有相应的培训，对整个流程有监测与控制，并与上级单位对项目与流程进行审查。</li><li>Level 3 - 定义级：在定义级水平上，企业不仅能够对项目的实施有一整套的管理措施，并保障项目的完成；而且，企业能够根据自身的特殊情况以及自己的标准流程，将这套管理体系与流程予以制度化这样，企业不仅能够在同类的项目上生到成功的实施，在不同类的项目上一样能够得到成功的实施。</li><li>Level 4 - 量化管理级：在量化管理级水平上，企业的项目管理不仅形成了一种制度，而且要实现数字化的管理。对管理流程要做到量化与数字化。通过量化技术来实现流程的稳定性，实现管理的精度，降低项目实施在质量上的波动。</li><li>Level 5 - 优化级：在优化级水平上，企业的项目管理达到了最高的境界。企业不仅能够通过信息手段与数字化手段来实现对项目的管理，而且能够充分利用信息资料，对企业在项目实施的过程中可能出现的次品予以预防。能够主动地改善流程，运用新技术，实现流程的优化。</li></ul><h4 id="6-用自己语言简述-SWEBok-或-CMMI-（约200字）"><a href="#6-用自己语言简述-SWEBok-或-CMMI-（约200字）" class="headerlink" title="6. 用自己语言简述 SWEBok 或 CMMI （约200字）"></a>6. 用自己语言简述 SWEBok 或 CMMI （约200字）</h4><p>CMMI 的全称为：Capability Maturity Model Integration，即能力成熟度模型集成。CMMI是CMM模型的最新版本。早期的CMMI（CMMI-SE/SW/IPPD）1.02版本是应用于软件业项目的管理方法。随着应用的推广与模型本身的发展，演绎成为一种被广泛应用的综合性模型。</p><p>CMMI 是一个集成化的 CMM 模型，其阶段式表现方法把 CMMI 中的若干个过程区域分成了 5 个成熟度级别，帮助实施 CMMI 的组织建议一条比较容易实现的过程改进发展道路。概括起来，CMMI 就是各个进程的一个关键的元素，在很多领域里面一个集成的点。它是这样的一个基本架构，能够用来度量你的有效性和实用性；能够找出这样的一些机会，继续改进的机会，包括在商业目标、策略还有降低项目的风险等方面。</p>]]></content>
      
      
        <tags>
            
            <tag> 软件系统分析与设计 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
